// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Basic Validation Working Test 1`] = `
Array [
  Object {
    "message": "Expected type 'string' but got 'number'",
    "node": Object {
      "children": Array [
        Object {
          "length": 4,
          "offset": 13,
          "parent": [Circular],
          "type": "string",
          "value": "id",
        },
        Object {
          "length": 1,
          "offset": 19,
          "parent": [Circular],
          "type": "number",
          "value": 1,
        },
      ],
      "colonOffset": 17,
      "length": 7,
      "offset": 13,
      "parent": Object {
        "children": Array [
          [Circular],
          Object {
            "children": Array [
              Object {
                "length": 6,
                "offset": 28,
                "parent": [Circular],
                "type": "string",
                "value": "type",
              },
              Object {
                "length": 7,
                "offset": 36,
                "parent": [Circular],
                "type": "string",
                "value": "input",
              },
            ],
            "colonOffset": 34,
            "length": 15,
            "offset": 28,
            "parent": [Circular],
            "type": "property",
          },
          Object {
            "children": Array [
              Object {
                "length": 9,
                "offset": 51,
                "parent": [Circular],
                "type": "string",
                "value": "binding",
              },
              Object {
                "length": 11,
                "offset": 62,
                "parent": [Circular],
                "type": "string",
                "value": "some.data",
              },
            ],
            "colonOffset": 60,
            "length": 22,
            "offset": 51,
            "parent": [Circular],
            "type": "property",
          },
          Object {
            "children": Array [
              Object {
                "length": 7,
                "offset": 81,
                "parent": [Circular],
                "type": "string",
                "value": "label",
              },
              Object {
                "children": Array [
                  Object {
                    "children": Array [
                      Object {
                        "length": 7,
                        "offset": 100,
                        "parent": [Circular],
                        "type": "string",
                        "value": "asset",
                      },
                      Object {
                        "children": Array [
                          Object {
                            "children": Array [
                              Object {
                                "length": 7,
                                "offset": 121,
                                "parent": [Circular],
                                "type": "string",
                                "value": "value",
                              },
                              Object {
                                "length": 17,
                                "offset": 130,
                                "parent": [Circular],
                                "type": "string",
                                "value": "{{input.label}}",
                              },
                            ],
                            "colonOffset": 128,
                            "length": 26,
                            "offset": 121,
                            "parent": [Circular],
                            "type": "property",
                          },
                        ],
                        "length": 48,
                        "offset": 109,
                        "parent": [Circular],
                        "type": "object",
                      },
                    ],
                    "colonOffset": 107,
                    "length": 57,
                    "offset": 100,
                    "parent": [Circular],
                    "type": "property",
                  },
                ],
                "length": 75,
                "offset": 90,
                "parent": [Circular],
                "type": "object",
              },
            ],
            "colonOffset": 88,
            "length": 84,
            "offset": 81,
            "parent": [Circular],
            "type": "property",
          },
        ],
        "length": 165,
        "offset": 5,
        "type": "object",
      },
      "type": "property",
    },
    "type": "type",
  },
  Object {
    "message": "Property 'id' missing from type 'Asset'",
    "node": Object {
      "children": Array [
        Object {
          "children": Array [
            Object {
              "length": 7,
              "offset": 121,
              "parent": [Circular],
              "type": "string",
              "value": "value",
            },
            Object {
              "length": 17,
              "offset": 130,
              "parent": [Circular],
              "type": "string",
              "value": "{{input.label}}",
            },
          ],
          "colonOffset": 128,
          "length": 26,
          "offset": 121,
          "parent": [Circular],
          "type": "property",
        },
      ],
      "length": 48,
      "offset": 109,
      "parent": Object {
        "children": Array [
          Object {
            "length": 7,
            "offset": 100,
            "parent": [Circular],
            "type": "string",
            "value": "asset",
          },
          [Circular],
        ],
        "colonOffset": 107,
        "length": 57,
        "offset": 100,
        "parent": Object {
          "children": Array [
            [Circular],
          ],
          "length": 75,
          "offset": 90,
          "parent": Object {
            "children": Array [
              Object {
                "length": 7,
                "offset": 81,
                "parent": [Circular],
                "type": "string",
                "value": "label",
              },
              [Circular],
            ],
            "colonOffset": 88,
            "length": 84,
            "offset": 81,
            "parent": Object {
              "children": Array [
                Object {
                  "children": Array [
                    Object {
                      "length": 4,
                      "offset": 13,
                      "parent": [Circular],
                      "type": "string",
                      "value": "id",
                    },
                    Object {
                      "length": 1,
                      "offset": 19,
                      "parent": [Circular],
                      "type": "number",
                      "value": 1,
                    },
                  ],
                  "colonOffset": 17,
                  "length": 7,
                  "offset": 13,
                  "parent": [Circular],
                  "type": "property",
                },
                Object {
                  "children": Array [
                    Object {
                      "length": 6,
                      "offset": 28,
                      "parent": [Circular],
                      "type": "string",
                      "value": "type",
                    },
                    Object {
                      "length": 7,
                      "offset": 36,
                      "parent": [Circular],
                      "type": "string",
                      "value": "input",
                    },
                  ],
                  "colonOffset": 34,
                  "length": 15,
                  "offset": 28,
                  "parent": [Circular],
                  "type": "property",
                },
                Object {
                  "children": Array [
                    Object {
                      "length": 9,
                      "offset": 51,
                      "parent": [Circular],
                      "type": "string",
                      "value": "binding",
                    },
                    Object {
                      "length": 11,
                      "offset": 62,
                      "parent": [Circular],
                      "type": "string",
                      "value": "some.data",
                    },
                  ],
                  "colonOffset": 60,
                  "length": 22,
                  "offset": 51,
                  "parent": [Circular],
                  "type": "property",
                },
                [Circular],
              ],
              "length": 165,
              "offset": 5,
              "type": "object",
            },
            "type": "property",
          },
          "type": "object",
        },
        "type": "property",
      },
      "type": "object",
    },
    "type": "missing",
  },
  Object {
    "message": "Property 'type' missing from type 'Asset'",
    "node": Object {
      "children": Array [
        Object {
          "children": Array [
            Object {
              "length": 7,
              "offset": 121,
              "parent": [Circular],
              "type": "string",
              "value": "value",
            },
            Object {
              "length": 17,
              "offset": 130,
              "parent": [Circular],
              "type": "string",
              "value": "{{input.label}}",
            },
          ],
          "colonOffset": 128,
          "length": 26,
          "offset": 121,
          "parent": [Circular],
          "type": "property",
        },
      ],
      "length": 48,
      "offset": 109,
      "parent": Object {
        "children": Array [
          Object {
            "length": 7,
            "offset": 100,
            "parent": [Circular],
            "type": "string",
            "value": "asset",
          },
          [Circular],
        ],
        "colonOffset": 107,
        "length": 57,
        "offset": 100,
        "parent": Object {
          "children": Array [
            [Circular],
          ],
          "length": 75,
          "offset": 90,
          "parent": Object {
            "children": Array [
              Object {
                "length": 7,
                "offset": 81,
                "parent": [Circular],
                "type": "string",
                "value": "label",
              },
              [Circular],
            ],
            "colonOffset": 88,
            "length": 84,
            "offset": 81,
            "parent": Object {
              "children": Array [
                Object {
                  "children": Array [
                    Object {
                      "length": 4,
                      "offset": 13,
                      "parent": [Circular],
                      "type": "string",
                      "value": "id",
                    },
                    Object {
                      "length": 1,
                      "offset": 19,
                      "parent": [Circular],
                      "type": "number",
                      "value": 1,
                    },
                  ],
                  "colonOffset": 17,
                  "length": 7,
                  "offset": 13,
                  "parent": [Circular],
                  "type": "property",
                },
                Object {
                  "children": Array [
                    Object {
                      "length": 6,
                      "offset": 28,
                      "parent": [Circular],
                      "type": "string",
                      "value": "type",
                    },
                    Object {
                      "length": 7,
                      "offset": 36,
                      "parent": [Circular],
                      "type": "string",
                      "value": "input",
                    },
                  ],
                  "colonOffset": 34,
                  "length": 15,
                  "offset": 28,
                  "parent": [Circular],
                  "type": "property",
                },
                Object {
                  "children": Array [
                    Object {
                      "length": 9,
                      "offset": 51,
                      "parent": [Circular],
                      "type": "string",
                      "value": "binding",
                    },
                    Object {
                      "length": 11,
                      "offset": 62,
                      "parent": [Circular],
                      "type": "string",
                      "value": "some.data",
                    },
                  ],
                  "colonOffset": 60,
                  "length": 22,
                  "offset": 51,
                  "parent": [Circular],
                  "type": "property",
                },
                [Circular],
              ],
              "length": 165,
              "offset": 5,
              "type": "object",
            },
            "type": "property",
          },
          "type": "object",
        },
        "type": "property",
      },
      "type": "object",
    },
    "type": "missing",
  },
]
`;

exports[`Export Test Exports Typescript Types With Filters 1`] = `
"import { Expression, Asset, Binding, AssetWrapper } from \\"@player-ui/types\\";

/**
 * This is the most generic way of gathering data. The input is bound to a data model using the 'binding' property.
 * Players can get field type information from the 'schema' definition, thus to decide the input controls for visual rendering.
*/
export interface InputAsset<AnyTextAsset extends Asset = Asset> extends Asset<'input'> {
    /** Asset container for a field label. */
    label?: AssetWrapper<AnyTextAsset>;
    /** Asset container for a note. */
    note?: AssetWrapper<AnyTextAsset>;
    /** The location in the data-model to store the data */
    binding: Binding;
    /** Optional additional data */
    metaData?: {
        /** Additional data to beacon when this input changes */
        beacon?: string | Record<string, any>;
    };
}
export interface TextAsset extends Asset<'text'> {
    /** The text to display */
    value: string;
    /** Any modifiers on the text */
    modifiers?: Array<{
        /** The modifier type */
        type: string;
        /** Modifiers can be named when used in strings */
        name?: string;
        [key: string]: unknown;
    } | {
        /** The link type denotes this as a link */
        type: 'link';
        /** An optional expression to run before the link is opened */
        exp?: Expression;
        /** metaData about the link's target */
        metaData: {
            /** The location of the link to load */
            ref: string;
            /** Used to indicate an application specific resolver to use */
            'mime-type'?: string;
        };
    }>;
}
/**
 * User actions can be represented in several places.
 * Each view typically has one or more actions that allow the user to navigate away from that view.
 * In addition, several asset types can have actions that apply to that asset only.
*/
export interface ActionAsset<AnyTextAsset extends Asset = Asset> extends Asset<'action'> {
    /** The transition value of the action in the state machine */
    value?: string;
    /** A text-like asset for the action's label */
    label?: AssetWrapper<AnyTextAsset>;
    /** An optional expression to execute before transitioning */
    exp?: Expression;
    /** An optional string that describes the action for screen-readers */
    accessibility?: string;
    /** Additional optional data to assist with the action interactions on the page */
    metaData?: {
        /** Additional data to beacon */
        beacon?: string | Record<string, any>;
        /** Force transition to the next view without checking for validation */
        skipValidation?: boolean;
    };
}
export interface InfoAsset extends Asset<'info'> {
    /** The string value to show */
    title?: AssetWrapper;
    /** subtitle */
    subTitle?: AssetWrapper;
    /** Primary place for info */
    primaryInfo?: AssetWrapper;
    /** List of actions to show at the bottom of the page */
    actions?: Array<AssetWrapper>;
}
export interface CollectionAsset extends Asset<'collection'> {
    /** An optional label to title the collection */
    label?: AssetWrapper;
    /** The string value to show */
    values?: Array<AssetWrapper>;
}"
`;

exports[`Export Test Exports Typescript Types With Transforms 1`] = `
"import { Expression, Asset, Binding, AssetWrapper } from \\"@player-ui/types\\";

/**
 * This is the most generic way of gathering data. The input is bound to a data model using the 'binding' property.
 * Players can get field type information from the 'schema' definition, thus to decide the input controls for visual rendering.
*/
export interface InputAsset<AnyTextAsset extends Asset = Asset> extends Asset<'input'> {
    /** Asset container for a field label. */
    label?: AssetWrapper<AnyTextAsset>;
    /** Asset container for a note. */
    note?: AssetWrapper<AnyTextAsset>;
    /** The location in the data-model to store the data */
    binding: Binding;
    /** Optional additional data */
    metaData?: {
        /** Additional data to beacon when this input changes */
        beacon?: string | Record<string, any>;
    };
    transformed?: true;
}
export interface TextAsset extends Asset<'text'> {
    /** The text to display */
    value: string;
    /** Any modifiers on the text */
    modifiers?: Array<{
        /** The modifier type */
        type: string;
        /** Modifiers can be named when used in strings */
        name?: string;
        [key: string]: unknown;
    } | {
        /** The link type denotes this as a link */
        type: 'link';
        /** An optional expression to run before the link is opened */
        exp?: Expression;
        /** metaData about the link's target */
        metaData: {
            /** The location of the link to load */
            ref: string;
            /** Used to indicate an application specific resolver to use */
            'mime-type'?: string;
        };
    }>;
    transformed?: true;
}
/**
 * User actions can be represented in several places.
 * Each view typically has one or more actions that allow the user to navigate away from that view.
 * In addition, several asset types can have actions that apply to that asset only.
*/
export interface ActionAsset<AnyTextAsset extends Asset = Asset> extends Asset<'action'> {
    /** The transition value of the action in the state machine */
    value?: string;
    /** A text-like asset for the action's label */
    label?: AssetWrapper<AnyTextAsset>;
    /** An optional expression to execute before transitioning */
    exp?: Expression;
    /** An optional string that describes the action for screen-readers */
    accessibility?: string;
    /** Additional optional data to assist with the action interactions on the page */
    metaData?: {
        /** Additional data to beacon */
        beacon?: string | Record<string, any>;
        /** Force transition to the next view without checking for validation */
        skipValidation?: boolean;
    };
    transformed?: true;
}
export interface InfoAsset extends Asset<'info'> {
    /** The string value to show */
    title?: AssetWrapper;
    /** subtitle */
    subTitle?: AssetWrapper;
    /** Primary place for info */
    primaryInfo?: AssetWrapper;
    /** List of actions to show at the bottom of the page */
    actions?: Array<AssetWrapper>;
    transformed?: true;
}
export interface CollectionAsset extends Asset<'collection'> {
    /** An optional label to title the collection */
    label?: AssetWrapper;
    /** The string value to show */
    values?: Array<AssetWrapper>;
    transformed?: true;
}"
`;

exports[`Export Test Exports Typescript types 1`] = `
"import { Expression, Asset, Binding, AssetWrapper } from \\"@player-ui/types\\";

/**
 * This is the most generic way of gathering data. The input is bound to a data model using the 'binding' property.
 * Players can get field type information from the 'schema' definition, thus to decide the input controls for visual rendering.
*/
export interface InputAsset<AnyTextAsset extends Asset = Asset> extends Asset<'input'> {
    /** Asset container for a field label. */
    label?: AssetWrapper<AnyTextAsset>;
    /** Asset container for a note. */
    note?: AssetWrapper<AnyTextAsset>;
    /** The location in the data-model to store the data */
    binding: Binding;
    /** Optional additional data */
    metaData?: {
        /** Additional data to beacon when this input changes */
        beacon?: string | Record<string, any>;
    };
}
export interface TextAsset extends Asset<'text'> {
    /** The text to display */
    value: string;
    /** Any modifiers on the text */
    modifiers?: Array<{
        /** The modifier type */
        type: string;
        /** Modifiers can be named when used in strings */
        name?: string;
        [key: string]: unknown;
    } | {
        /** The link type denotes this as a link */
        type: 'link';
        /** An optional expression to run before the link is opened */
        exp?: Expression;
        /** metaData about the link's target */
        metaData: {
            /** The location of the link to load */
            ref: string;
            /** Used to indicate an application specific resolver to use */
            'mime-type'?: string;
        };
    }>;
}
/**
 * User actions can be represented in several places.
 * Each view typically has one or more actions that allow the user to navigate away from that view.
 * In addition, several asset types can have actions that apply to that asset only.
*/
export interface ActionAsset<AnyTextAsset extends Asset = Asset> extends Asset<'action'> {
    /** The transition value of the action in the state machine */
    value?: string;
    /** A text-like asset for the action's label */
    label?: AssetWrapper<AnyTextAsset>;
    /** An optional expression to execute before transitioning */
    exp?: Expression;
    /** An optional string that describes the action for screen-readers */
    accessibility?: string;
    /** Additional optional data to assist with the action interactions on the page */
    metaData?: {
        /** Additional data to beacon */
        beacon?: string | Record<string, any>;
        /** Force transition to the next view without checking for validation */
        skipValidation?: boolean;
    };
}
export interface InfoAsset extends Asset<'info'> {
    /** The string value to show */
    title?: AssetWrapper;
    /** subtitle */
    subTitle?: AssetWrapper;
    /** Primary place for info */
    primaryInfo?: AssetWrapper;
    /** List of actions to show at the bottom of the page */
    actions?: Array<AssetWrapper>;
}
export interface CollectionAsset extends Asset<'collection'> {
    /** An optional label to title the collection */
    label?: AssetWrapper;
    /** The string value to show */
    values?: Array<AssetWrapper>;
}"
`;

exports[`Object Recall Processed 1`] = `
Object {
  "additionalProperties": false,
  "description": "This is the most generic way of gathering data. The input is bound to a data model using the 'binding' property.
Players can get field type information from the 'schema' definition, thus to decide the input controls for visual rendering.",
  "extends": Object {
    "genericArguments": Array [
      Object {
        "const": "input",
        "type": "string",
      },
    ],
    "ref": "Asset<'input'>",
    "type": "ref",
  },
  "genericTokens": Array [
    Object {
      "constraints": Object {
        "ref": "Asset",
        "type": "ref",
      },
      "default": Object {
        "ref": "Asset",
        "type": "ref",
      },
      "symbol": "AnyTextAsset",
    },
  ],
  "name": "InputAsset",
  "properties": Object {
    "binding": Object {
      "node": Object {
        "description": "The location in the data-model to store the data",
        "ref": "Binding",
        "title": "InputAsset.binding",
        "type": "ref",
      },
      "required": true,
    },
    "label": Object {
      "node": Object {
        "description": "Asset container for a field label.",
        "genericArguments": Array [
          Object {
            "ref": "AnyTextAsset",
            "type": "ref",
          },
        ],
        "ref": "AssetWrapper<AnyTextAsset>",
        "title": "InputAsset.label",
        "type": "ref",
      },
      "required": false,
    },
    "metaData": Object {
      "node": Object {
        "additionalProperties": false,
        "description": "Optional additional data",
        "properties": Object {
          "beacon": Object {
            "node": Object {
              "description": "Additional data to beacon when this input changes",
              "name": "BeaconDataType",
              "or": Array [
                Object {
                  "title": "BeaconDataType",
                  "type": "string",
                },
                Object {
                  "keyType": Object {
                    "type": "string",
                  },
                  "title": "BeaconDataType",
                  "type": "record",
                  "valueType": Object {
                    "type": "any",
                  },
                },
              ],
              "source": "/private/var/tmp/_bazel_kreddy8/6fc13ccb395252816f0c23d8394e8532/sandbox/darwin-sandbox/181/execroot/player/node_modules/@player-ui/beacon-plugin/dist/index.d.ts",
              "title": "InputAsset.metaData.beacon",
              "type": "or",
            },
            "required": false,
          },
        },
        "title": "InputAsset.metaData",
        "type": "object",
      },
      "required": false,
    },
    "note": Object {
      "node": Object {
        "description": "Asset container for a note.",
        "genericArguments": Array [
          Object {
            "ref": "AnyTextAsset",
            "type": "ref",
          },
        ],
        "ref": "AssetWrapper<AnyTextAsset>",
        "title": "InputAsset.note",
        "type": "ref",
      },
      "required": false,
    },
  },
  "source": "/private/var/tmp/_bazel_kreddy8/6fc13ccb395252816f0c23d8394e8532/sandbox/darwin-sandbox/181/execroot/player/plugins/reference-assets/core/src/assets/input/types.ts",
  "title": "InputAsset",
  "type": "object",
}
`;

exports[`Object Recall Raw 1`] = `
Object {
  "additionalProperties": false,
  "description": "This is the most generic way of gathering data. The input is bound to a data model using the 'binding' property.
Players can get field type information from the 'schema' definition, thus to decide the input controls for visual rendering.",
  "extends": Object {
    "genericArguments": Array [
      Object {
        "const": "input",
        "type": "string",
      },
    ],
    "ref": "Asset<'input'>",
    "type": "ref",
  },
  "genericTokens": Array [
    Object {
      "constraints": Object {
        "ref": "Asset",
        "type": "ref",
      },
      "default": Object {
        "ref": "Asset",
        "type": "ref",
      },
      "symbol": "AnyTextAsset",
    },
  ],
  "name": "InputAsset",
  "properties": Object {
    "binding": Object {
      "node": Object {
        "description": "The location in the data-model to store the data",
        "ref": "Binding",
        "title": "InputAsset.binding",
        "type": "ref",
      },
      "required": true,
    },
    "label": Object {
      "node": Object {
        "description": "Asset container for a field label.",
        "genericArguments": Array [
          Object {
            "ref": "AnyTextAsset",
            "type": "ref",
          },
        ],
        "ref": "AssetWrapper<AnyTextAsset>",
        "title": "InputAsset.label",
        "type": "ref",
      },
      "required": false,
    },
    "metaData": Object {
      "node": Object {
        "additionalProperties": false,
        "description": "Optional additional data",
        "properties": Object {
          "beacon": Object {
            "node": Object {
              "description": "Additional data to beacon when this input changes",
              "name": "BeaconDataType",
              "or": Array [
                Object {
                  "title": "BeaconDataType",
                  "type": "string",
                },
                Object {
                  "keyType": Object {
                    "type": "string",
                  },
                  "title": "BeaconDataType",
                  "type": "record",
                  "valueType": Object {
                    "type": "any",
                  },
                },
              ],
              "source": "/private/var/tmp/_bazel_kreddy8/6fc13ccb395252816f0c23d8394e8532/sandbox/darwin-sandbox/181/execroot/player/node_modules/@player-ui/beacon-plugin/dist/index.d.ts",
              "title": "InputAsset.metaData.beacon",
              "type": "or",
            },
            "required": false,
          },
        },
        "title": "InputAsset.metaData",
        "type": "object",
      },
      "required": false,
    },
    "note": Object {
      "node": Object {
        "description": "Asset container for a note.",
        "genericArguments": Array [
          Object {
            "ref": "AnyTextAsset",
            "type": "ref",
          },
        ],
        "ref": "AssetWrapper<AnyTextAsset>",
        "title": "InputAsset.note",
        "type": "ref",
      },
      "required": false,
    },
  },
  "source": "/private/var/tmp/_bazel_kreddy8/6fc13ccb395252816f0c23d8394e8532/sandbox/darwin-sandbox/181/execroot/player/plugins/reference-assets/core/src/assets/input/types.ts",
  "title": "InputAsset",
  "type": "object",
}
`;
